[MQTT-3.1.3-8] Reject 0-length clientid with cleansession false
[MQTT-3.6.1-1] bits in fixed header for pubrel are ok
[MQTT-4.7.1-3] + can be used at any complete level
[MQTT-3.9.3-1] the order of return codes must match order of topics in subscribe
[MQTT-3.1.2-6] broker must discard the session data for client A clientid that is longer than 23 chars - should work in 3.1.1
[MQTT-2.1.2-6] store retained message and QoS
[MQTT-3.1.3-5] Clientids of 1 to 23 chars and ascii alphanumeric must be allowed
[MQTT-2.3.1-5] no packet indentifier in publish if QoS is 0
[MQTT-3.1.3-4] Clientid must be Unicode, and between 0 and 65535 bytes long
[MQTT-3.2.2-1] must close connection after non-zero connack
[MQTT-3.8.4-5] return code must be returned for each topic in subscribe
[MQTT-3.1.2-16] username must not be in payload if user name flag is 0
[MQTT-2.3.1-7][MQTT-3.8.4-2] Suback has same message id as subscribe
[MQTT-2.3.1-1] packet indentifier must be in unsubscribe
[MQTT-4.1.0-1] server must store data for at least as long as the network connection lasts
[MQTT-2.3.1-6] pubrec messge id same as publish
[MQTT-4.7.3-2] topic names and filters not include null
[MQTT-3.8.4-1] Must respond with suback
[MQTT-3.10.3-5] Unsuback must be sent even if no topics are matched
[MQTT-4.7.1-2] # must be last, and next to /
[MQTT-2.3.1-1] packet indentifier must be in subscribe
[MQTT-3-10.1-1] fixed header bits are 0,0,1,0
[MQTT-2.1.2-9] Set retained flag on retained messages
[MQTT-3.14.4-2] Client must not send any more packets after disconnect
[MQTT-3.2.0-1] the first response to a client must be a connack
[MQTT-3.10.3-4] Unsuback must be sent - same message id as unsubscribe
[MQTT-2.1.2-7] Last retained message on matching topics sent on subscribe
[MQTT-2.3.1-1] packet indentifier must be in publish if QoS is 1 or 2
[MQTT-4.7.3-1] all topic names and filters must be at least 1 char
[MQTT-2.3.1-7] Unsuback has same message id as unsubscribe
[MQTT-2.3.1-6] puback messge id same as publish
[MQTT-4.6.0-6] publish packets must be sent in order of receipt from any given client
[MQTT-3.1.3-9] if clientid is rejected, must send connack 2 and close connection
[MQTT-2.3.1-6] pubcomp messge id same as publish
[MQTT-2.1.2-12] non-retained message - do not store
[MQTT-3.1.4-3] When rejecting connect, no more data must be processed
[MQTT-3.1.3-3] Clientid must be present, and first field
[MQTT-3.1.2-7] retained messages not cleaned up as part of session state for client A clientid that is longer than 23 chars - should work in 3.1.1
[MQTT-3.2.3-3] topic name must match the subscription's topic filter
[MQTT-4.7.3-3] all topic names and filters must be <= 65535 bytes long
CALL socket_create with {'port': 1883, 'hostname': 'localhost'}
RESULT from socket_create is 0
CALL connect with {'clientid': 'A clientid that is longer than 23 chars - should work in 3.1.1', 'cleansession': True, 'sockid': 0}
OBSERVED EVENT (0, Connacks(DUP=False, QoS=0, Retain=False, Session present=False, ReturnCode=0))
RESULT from connect is 0
CALL unsubscribe with {'topics': ('/TopicA',), 'sockid': 0}
OBSERVED EVENT (0, Unsubacks(DUP=False, QoS=0, Retain=False, MsgId=2))
RESULT from unsubscribe is 2
CALL publish with {'payload': b'longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong', 'retained': False, 'topic': 'Topic/C', 'sockid': 0, 'qos': 0}
RESULT from publish is 0
CALL publish with {'payload': b'333', 'retained': False, 'topic': 'TopicA/C', 'sockid': 0, 'qos': 1}
OBSERVED EVENT (0, Pubacks(DUP=False, QoS=0, Retain=False, MsgId 3)
RESULT from publish is 3
CALL publish with {'payload': b'333', 'retained': False, 'topic': '/TopicA', 'sockid': 0, 'qos': 0}
RESULT from publish is 0
CALL publish with {'payload': b'1', 'retained': True, 'topic': 'TopicA/C', 'sockid': 0, 'qos': 1}
OBSERVED EVENT (0, Pubacks(DUP=False, QoS=0, Retain=False, MsgId 4)
RESULT from publish is 4
CALL publish with {'payload': b'1', 'retained': True, 'topic': 'Topic/C', 'sockid': 0, 'qos': 1}
OBSERVED EVENT (0, Pubacks(DUP=False, QoS=0, Retain=False, MsgId 5)
RESULT from publish is 5
CALL publish with {'payload': b'1', 'retained': False, 'topic': 'TopicA', 'sockid': 0, 'qos': 2}
OBSERVED EVENT (0, Pubrecs(DUP=False, QoS=0, Retain=False, MsgId=6))
RESULT from publish is 6
CALL pubrel with {'pubrec': (0, Pubrecs(DUP=False, QoS=0, Retain=False, MsgId=6))}
OBSERVED EVENT (0, Pubcomps(DUP=False, QoS=0, Retain=False, MsgId=6))
CALL publish with {'payload': b'', 'retained': False, 'topic': 'TopicA', 'sockid': 0, 'qos': 1}
OBSERVED EVENT (0, Pubacks(DUP=False, QoS=0, Retain=False, MsgId 7)
RESULT from publish is 7
CALL publish with {'payload': b'333', 'retained': False, 'topic': '/TopicA', 'sockid': 0, 'qos': 0}
RESULT from publish is 0
CALL subscribe with {'qoss': (2,), 'sockid': 0, 'topics': ('+/C',)}
OBSERVED EVENT (0, Publishes(DUP=False, QoS=1, Retain=True, MsgId=1, TopicName='TopicA/C', Payload=b'1'))
OBSERVED EVENT (0, Publishes(DUP=False, QoS=1, Retain=True, MsgId=2, TopicName='Topic/C', Payload=b'1'))
OBSERVED EVENT (0, Subacks(DUP=False, QoS=0, Retain=False, MsgId=8, Data=[2]))
RESULT from subscribe is 8
CALL puback with {'publish': (0, Publishes(DUP=False, QoS=1, Retain=True, MsgId=2, TopicName='Topic/C', Payload=b'1'))}
CALL puback with {'publish': (0, Publishes(DUP=False, QoS=1, Retain=True, MsgId=1, TopicName='TopicA/C', Payload=b'1'))}
CALL socket_close with {'sockid': 0}
CALL socket_create with {'port': 1883, 'hostname': 'localhost'}
RESULT from socket_create is 1
CALL connect with {'clientid': '', 'cleansession': False, 'sockid': 1}
OBSERVED EVENT (1, Connacks(DUP=False, QoS=0, Retain=False, Session present=False, ReturnCode=2))
RESULT from connect is 2
CALL publish with {'payload': b'333', 'retained': True, 'topic': 'TopicA', 'sockid': 1, 'qos': 2}
RESULT from publish is exception Traceback (most recent call last):
  File "/home/icraggs/work/paho/org.eclipse.paho.mqtt.testing/interoperability/mbt/main.py", line 408, in step
    rc = action(**kwargs)
  File "/home/icraggs/work/paho/org.eclipse.paho.mqtt.testing/interoperability/mbt/main.py", line 175, in __call__
    return self.fn(*args, **kwargs)
  File "/home/icraggs/work/paho/org.eclipse.paho.mqtt.testing/interoperability/MQTTV311_spec.py", line 208, in publish
    checksocket(sockid)
  File "/home/icraggs/work/paho/org.eclipse.paho.mqtt.testing/interoperability/MQTTV311_spec.py", line 157, in checksocket
    sockets[sockid].getpeername() # throws an exception if the socket is not connected
OSError: [Errno 107] Transport endpoint is not connected
RESTART
